generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  active             Boolean   @default(false)
  name               String
  email              String    @unique
  verificationToken  String?
  phone              String?
  stripeId           String?
  password           String?
  avatar             String?
  loginAttempts      Int       @default(0)
  points             Int?
  role               String    @default("cliente")
  createdAt          DateTime  @default(now()) @map("createdAt")
  updatedAt          DateTime  @updatedAt @map("updatedAt")
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String   @unique
  address   String
  image       String
  orders    Order[]
  layaways  Layaway[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Counter {
  id        String   @id @default("order_counter") @map("_id")
  sequence  Int      @default(0)
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNo     String   @unique  // This will store "000001" format
  client      Client   @relation(fields: [clientId], references: [id])
  clientId    String   @db.ObjectId
  status      String
  totalAmount Int
  notes       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime
  invoice     Invoice?
  invoiceId   String?  @db.ObjectId
  packages    Package[]
  orderItems  OrderItem[]
  layaway     Layaway? @relation(fields: [layawayId], references: [id])
  layawayId   String?  @db.ObjectId
  payments    Payment[]
}


model Package {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @unique @db.ObjectId
  trackingId  String   @unique
  status      String   // Pending, In Transit, Delivered
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deliveries  Delivery[]
}

model Delivery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  package     Package  @relation(fields: [packageId], references: [id])
  packageId   String   @db.ObjectId
  carrier     String
  deliveryDate DateTime?
  status      String   // Out for Delivery, Delivered, Failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @unique @db.ObjectId
  totalAmount Int
  status      String   // Paid, Unpaid, Overdue
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receipts    Receipt[]
}

model Receipt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   String   @db.ObjectId
  payment     Payment  @relation(fields: [paymentId], references: [id])
  paymentId   String   @db.ObjectId
  issuedDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Int
  method      String   // Credit Card, Bank Transfer, PayPal, Cash
  reference   String?
  status      String   // Completed, Pending, Failed
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receipts Receipt[]
}

model Layaway {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  client      Client   @relation(fields: [clientId], references: [id])
  clientId    String   @db.ObjectId
  deposit     Int
  balance     Int
  status      String   // Active, Completed, Cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}


model Item {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String
  sku         String
  barcode     String
  dimensions  String
  price       Int
  cost        Int
  minStock    Int
  tax         Int
  notes       String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  supplierId  String     @db.ObjectId
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String     @db.ObjectId
  brand       Brand      @relation(fields: [brandId], references: [id])
  brandId     String     @db.ObjectId
  unit        Unit       @relation(fields: [unitId], references: [id])
  unitId      String     @db.ObjectId
  itemGroups  ItemOnGroup[] // Many-to-many relationship via join table
}

model ItemOnGroup {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String   @db.ObjectId
  itemGroup  ItemGroup @relation(fields: [itemGroupId], references: [id])
  itemGroupId String   @db.ObjectId
}

model ItemGroup {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       ItemOnGroup[] // Many-to-many relationship via join table
}

model OrderItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  order       Order  @relation(fields: [orderId], references: [id])
  orderId     String @db.ObjectId
  itemId      String @db.ObjectId // Keep the itemId for reference, but don't enforce a foreign key constraint
  image       String
  name        String     
  description String
  quantity    Int
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Warehouse {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  location    String
  type        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  stocks      Stock[]
}

model Stock {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  itemId      String    @db.ObjectId
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String    @db.ObjectId
  quantity    Int      
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([itemId, warehouseId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       Item[]
}

model Unit {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  abbreviation String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       Item[]
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       Item[]
}

model Supplier {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  phone       String    @unique
  email       String
  address     String
  contactPerson  String
  supplierCode String @unique
  paymentTerms String
  taxId       String
  notes       String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  item        Item[]
}
