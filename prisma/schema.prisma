generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") 
}


model Counter {
  id        String   @id @default("order_counter") @map("_id")
  sequence  Int      @default(0)
}

model POCounter {
  id        String   @id @default("po_counter") @map("_id")
  sequence  Int      @default(0)
}

// ******************* USERS ****************** //

model User {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  active             Boolean   @default(false)
  name               String
  email              String    @unique
  verificationToken  String?  @unique
  authCode           String?  
  phone              String?
  stripeId           String?
  password           String?
  avatar             String?
  loginAttempts      Int       @default(0)
  points             Int?
  role               Role    @default(CLIENTE)
  // Warehouse assignment
  warehouseId        String?  @db.ObjectId  // User's assigned warehouse
  warehouse          Warehouse? @relation(fields: [warehouseId], references: [id])
  // POS authentication
  posPin             String?   // PIN for POS access
  posPinSetAt        DateTime? // When PIN was set
  createdAt          DateTime  @default(now()) @map("createdAt")
  updatedAt          DateTime  @updatedAt @map("updatedAt")
  orders             Order[]
  cashRegister       CashRegister?
  posSessions        PosSession[]
}

enum Role {
  CLIENTE
  CHOFER
  GERENTE
  EMPLEADO
  ADMIN
  SUPER_ADMIN
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String   @unique
  address   String
  image     String
  status        ClientStatus @default(ACTIVE)
  orders    Order[]
  whatsAppMessages      WhatsAppMessage[]
  posOrders PosOrder[]
  heldOrders HeldOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([phone, email]) // Index on phone and email
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

model Driver {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId        String?
  licenseNumber String
  status        DriverStatus @default(DISPONIBLE)
  deliveries    Delivery[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}

enum DriverStatus {
  DISPONIBLE
  OCUPADO
  DESCONECTADO
}

model Supplier {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  phone       String    @unique
  email       String
  address     String
  contactPerson  String
  supplierCode String @unique
  paymentTerms String
  taxId       String
  notes       String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  purchaseOrders PurchaseOrder[]
}


// ******************* SALES ****************** //


model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNo     String   @unique  // This will store "000001" format
  client      Client   @relation(fields: [clientId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  clientId    String   @db.ObjectId
  delivery    Delivery?   @relation(fields: [deliveryId], references: [id])
  deliveryId    String?   @db.ObjectId
  status      OrderStatus   @default(PENDIENTE)
  totalAmount Int
  discount Float?
  signature   String?  // Add this field
  imageUrl    String?  // Add this field
  notes       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime
  invoice     Invoice?
  invoiceId   String?  @db.ObjectId
  orderItems  OrderItem[]
  payments    Payment[]
  posOrders   PosOrder[]
}

enum OrderStatus {
  PENDIENTE
  PROCESANDO
  PAGADO
  ENVIADO
  ENTREGADO
  COMPLETADO
  CANCELADO
}

model OrderItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  order       Order  @relation(fields: [orderId], references: [id])
  orderId     String @db.ObjectId
  itemId      String @db.ObjectId // Keep the itemId for reference, but don't enforce a foreign key constraint
  image       String?
  name        String 
  isGroup     Boolean  @default(false)  
  description String
  quantity    Int
  price       Int
  categoryId  String?     @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// ******************* SHIPPING ****************** //


model Delivery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String @db.ObjectId
  orderNo     String
  method        DeliveryMethod
  userId      String   @db.ObjectId
  driverId      String?   @db.ObjectId
  driver        Driver?   @relation(fields: [driverId], references: [id])
  truckId       String?   @db.ObjectId
  truck         Truck?    @relation(fields: [truckId], references: [id])
  externalShipId String?  
  trackingUrl   String?   // URL to track the shipment
  carrier     String
  otp         String
  price         Float
  signature   String?  // Add this field
  imageUrl    String?  // Add this field
  trackingNumber    String  @unique
  deliveryDate DateTime?
  status      String  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders    Order[]
}

enum DeliveryMethod {
  INTERNO
  EXTERNO
}

enum DeliveryStatus {
  PENDIENTE
  EN_TRANSITO
  ENTREGADO
  FALLIDO
}

model Truck {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    
  km         String    
  licensePlate  String    @unique
  status        TruckStatus @default(DISPONIBLE)
  deliveries    Delivery[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}

enum TruckStatus {
  DISPONIBLE
  EN_USO
  MANTENIMIENTO
}


// ********************* PRODUCTS *********************  //


model Item {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String     @unique
  description   String
  sku           String     @unique
  barcode       String?    @unique
  status        ItemStatus @default(ACTIVE)
  dimensions    String?
  weight        Float?
  price         Float
  cost          Float
  minStock      Int
  maxStock      Int?      // Maximum stock level for reordering decisions
  reorderPoint  Int?      // Level at which to trigger reorder
  tax           Float
  notes         String?
  images        String[]   @default([])  // ✅ Default to empty array
  mainImage     String
  isDigital     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  supplierId    String     @db.ObjectId
  categoryId    String     @db.ObjectId
  brandId       String     @db.ObjectId
  unitId        String     @db.ObjectId
  variants      ItemVariant[]
  itemGroups  ItemGroupItem[] // Relationship to the join table
  stocks        Stock[]
  stockMovements StockMovement[]
}



enum ItemStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  OUT_OF_STOCK
  LOW_STOCK
}

model ItemGroupItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemGroupId String   @db.ObjectId
  itemId      String   @db.ObjectId
  quantity    Int
  item        Item     @relation(fields: [itemId], references: [id])
  itemGroup   ItemGroup @relation(fields: [itemGroupId], references: [id])

  @@unique([itemGroupId, itemId]) // Ensure each item is unique within a group
}

model ItemGroup {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  mainImage   String?
  barcode     String?
  price       Float
  notes       String?
  status      ItemStatus     @default(ACTIVE)
  itemVariantId String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  items       ItemGroupItem[] // Relationship to the join table
}


model ItemVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      String   @db.ObjectId
  sku         String   @unique
  name        String
  attributes  Json     // Store variant attributes (color, size, etc.)
  price       Float?   // Override main item price if needed
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Unit {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  abbreviation String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



// ********************* INVENTORY MANAGEMENT ********************* //



model Stock {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  item          Item      @relation(fields: [itemId], references: [id])
  itemId        String    @db.ObjectId
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId   String    @db.ObjectId
  quantity      Int       @default(0)
  reservedQty   Int       @default(0)  // Quantity reserved for orders
  availableQty  Int       @default(0)  // Actual available quantity
  location      String?   // Specific location within warehouse (e.g., "Shelf A-123")
  lastInventoryDate DateTime?  // Date of last physical inventory check
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([itemId, warehouseId])
}


model Warehouse {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String    @unique
  code          String    @unique
  type          WarehouseType
  address       Address
  status        WarehouseStatus @default(ACTIVE)
  capacity      Float?    // Storage capacity in cubic meters or similar
  stocks        Stock[]
  users         User[]    // Users assigned to this warehouse
  incomingMovements StockMovement[] @relation("ToWarehouse")
  outgoingMovements StockMovement[] @relation("FromWarehouse")
  // Branch notification relations
  notificationsFrom BranchNotification[] @relation("NotificationFrom")
  notificationsTo   BranchNotification[] @relation("NotificationTo")
  transfersFrom     BranchStockTransfer[] @relation("TransferFrom")
  transfersTo       BranchStockTransfer[] @relation("TransferTo")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


type Address {
  street     String
  city       String
  state      String
  country    String
  postalCode String
}

model StockMovement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  item          Item      @relation(fields: [itemId], references: [id])
  itemId        String    @db.ObjectId
  type          MovementType
  quantity      Int
  fromWarehouse Warehouse? @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  fromWarehouseId String?  @db.ObjectId
  toWarehouse   Warehouse? @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  toWarehouseId String?    @db.ObjectId
  reference     String?    // Reference to order, transfer, adjustment, etc.
  reason        String?
  status        MovementStatus @default(PENDING)
  createdBy     String    @db.ObjectId  // User who created the movement
  approvedBy    String?   @db.ObjectId  // User who approved the movement
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum MovementType {
  PURCHASE
  SALE
  TRANSFER
  ADJUSTMENT
  RETURN
  DAMAGED
  EXPIRED
}

enum MovementStatus {
  PENDING
  COMPLETED
  CANCELLED
  REJECTED
}


enum WarehouseType {
  PRINCIPAL
  SUCURSAL
}

enum WarehouseStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FULL
}

// ********************* INVENTORY ADJUSTMENTS ********************* //

model InventoryCount {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  warehouseId   String    @db.ObjectId
  status        CountStatus @default(DRAFT)
  countDate     DateTime
  notes         String?
  items         CountItem[]
  createdBy     String    @db.ObjectId
  approvedBy    String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CountItem {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  inventoryCount  InventoryCount @relation(fields: [inventoryCountId], references: [id])
  inventoryCountId String    @db.ObjectId
  itemId          String    @db.ObjectId
  expectedQty     Int
  actualQty       Int
  difference      Int
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum CountStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// ************* ACCOUNTING ******************* //

model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  code          String    @unique  // Chart of accounts code
  name          String
  type          AccountType
  description   String?
  parentAccount String?   @db.ObjectId  // For hierarchical account structure
  balance       Float     @default(0)
  transactions  Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime
  description   String
  amount        Float
  type          TransactionType
  reference     String?   // Reference to external documents
  account       Account   @relation(fields: [accountId], references: [id])
  accountId     String    @db.ObjectId
  orderId       String?   @db.ObjectId  // For sales orders
  registerId    String?   @db.ObjectId  // For sales orders
  purchaseOrderId String? @db.ObjectId  // For purchase orders
  expenseId     String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TransactionType {
  DEPOSITO
  RETIRO
}

model Expense {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  type          ExpenseType
  amount        Float
  description   String?
  reference     String?   // Invoice or receipt number
  status        ExpenseStatus @default(PENDING)
  paymentDate   DateTime?
  deliveryId    String?   
  driverId      String?   
  truckId       String?   
  externalShipId String?  
  supplierId    String?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ExpenseStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum ExpenseType {
  NOMINA
  GASOLINA
  PROVEEDOR
  MANTENIMIENTO
  OFICINA
  OTRO
}

model Accounting {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  revenue       Float     // Total revenue from orders
  expenses      Float     // Total expenses
  profit        Float     // Calculated as revenue - expenses
  period        DateTime  // e.g., monthly or yearly
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}


model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @unique @db.ObjectId
  orderNo   String
  totalAmount Int
  status      String   // Paid, Unpaid, Overdue
  issuedDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paymentId   String   @db.ObjectId
}


model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Int
  method      String   // Credit Card, Bank Transfer, PayPal, Cash
  reference   String?
  status      String   // Completed, Pending, Failed
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  orderNo   String
  invoiceId   String?   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ******************* ACCOUNTING CASH **************** //
model CashRegister {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  balance       Float     @default(0)
  fund          Float     @default(0)
  billBreakdown Json?     // CashBreakdown object storing current denomination counts
  transactions  CashTransaction[]
  audits        CashAudit[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @db.ObjectId @unique
  managerId     String?
  status     CashRegisterStatus? @default(ACTIVA)
  // POS specific fields
  location      String?  // Physical location
  posPin        String?  // PIN for POS access
  posSessions   PosSession[]
  heldOrders    HeldOrder[]
}

enum CashRegisterStatus {
  ACTIVA
  INACTIVA
}


model CashTransaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  type          CashTransactionType
  amount        Float
  description   String?
  cashRegister  CashRegister @relation(fields: [cashRegisterId], references: [id])
  cashRegisterId String    @db.ObjectId
  billBreakdown Json?     // CashBreakdown object storing denomination data
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String?
}

enum CashTransactionType {
  DEPOSITO
  RETIRO
}

model CashAudit {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  cashRegister  CashRegister @relation(fields: [cashRegisterId], references: [id])
  cashRegisterId String    @db.ObjectId
  startBalance  Float
  endBalance    Float
  auditDate     DateTime
  billBreakdown Json?     // CashBreakdown object storing final cash count breakdown
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  managerId     String?
  userId        String?
}

// ************* PURCHASE ORDERS ******************* //

model PurchaseOrder {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  poNumber      String    @unique  // PO-000001 format
  supplierId    String    @db.ObjectId
  supplier      Supplier  @relation(fields: [supplierId], references: [id]) // Add this line
  status        POStatus  @default(BORRADOR)
  totalAmount   Float
  taxAmount     Float
  notes         String?
  expectedDate  DateTime
  items         PurchaseOrderItem[]
  receipts      GoodsReceipt[]
  payments      SupplierPayment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String?
}

enum POStatus {
  BORRADOR
  PENDIENTE
  APROBADO
  ORDERED
  PARCIALMENTE_RECIBIDO
  RECIBIDO
  CANCELADO
}

model PurchaseOrderItem {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String    @db.ObjectId
  itemId          String    @db.ObjectId
  image       String?
  name        String 
  description String?
  quantity        Int
  unitPrice       Float
  tax             Float
  receivedQty     Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


model GoodsReceipt {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  receiptNumber   String    @unique
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String    @db.ObjectId
  receivedDate    DateTime
  items           ReceivedItem[]
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ReceivedItem {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  goodsReceipt    GoodsReceipt @relation(fields: [goodsReceiptId], references: [id])
  goodsReceiptId  String    @db.ObjectId
  itemId          String    @db.ObjectId
  quantity        Int
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SupplierPayment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String    @db.ObjectId
  amount          Float
  paymentDate     DateTime
  paymentMethod   PaymentMethod
  reference       String?   // Check number, transaction ID, etc.
  status          PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum PaymentMethod {
  BANK_TRANSFER
  CHECK
  CASH
  CREDIT_CARD
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}


model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // e.g., "sales", "inventory", "accounting"
  startDate   DateTime // Start date for the report
  endDate     DateTime // End date for the report
  generatedAt DateTime @default(now()) // When the report was generated
  pdfUrl      String   // URL or path to the generated PDF file
  createdBy   String   @db.ObjectId // User who generated the report
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdByUser String
}


// ******************* WHATSAPP MESSAGES ****************** //

model WhatsAppMessage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  client      Client    @relation(fields: [clientId], references: [id])
  clientId    String    @db.ObjectId
  phone       String    
  message     String    // The content of the message
  template    String?    
  header      String?    
  footer      String?    
  button      String?    
  variables   String[]
  type     String    
  sentiment      String?
  sender      SenderType // Whether the message was sent by the client or the system
  status      MessageStatus @default(RECEIVED) // Status of the message (e.g., sent, delivered, read)
  timestamp   DateTime  @default(now()) // Timestamp of the message
  mediaUrl    String?   // URL to any media (image, video, document) sent with the message
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum SenderType {
  CLIENT
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  RECEIVED
  READ
  FAILED
}


model ConversationSummary {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  phone     String
  summary   String
  timestamp DateTime  @default(now()) // Timestamp of the message
  createdAt DateTime @default(now())
}

model SentimentAnalysis {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  phone        String
  sentiment    String
  score        Int
  topics       String[]
  urgentIssues String[]
  timestamp    DateTime  @default(now()) // Timestamp of the message
  createdAt    DateTime @default(now())
}

model Escalation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String?
  phone     String
  reason    String
  status    String
  timestamp DateTime @default(now())
}

model Feedback {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  phone     String    @db.ObjectId
  feedback  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ******************* BRANCH NOTIFICATION SYSTEM ****************** //

model BranchNotification {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  notificationNo  String                 @unique // Format: "BN000001"
  type            NotificationType
  priority        NotificationPriority   @default(NORMAL)
  title           String
  message         String
  // Source branch (where the request originates)
  fromWarehouseId String                 @db.ObjectId
  fromWarehouse   Warehouse             @relation("NotificationFrom", fields: [fromWarehouseId], references: [id])
  // Target branch (where the item is available)
  toWarehouseId   String                 @db.ObjectId  
  toWarehouse     Warehouse             @relation("NotificationTo", fields: [toWarehouseId], references: [id])
  // Related entities
  itemId          String                 @db.ObjectId
  orderId         String?                @db.ObjectId
  posOrderId      String?                @db.ObjectId
  requestedQty    Int
  availableQty    Int                    @default(0)
  fulfilledQty    Int                    @default(0)
  // Status and workflow
  status          NotificationStatus     @default(PENDING)
  urgency         Boolean                @default(false) // Critical stock-out situation
  estimatedTime   DateTime?              // When pickup/delivery is expected
  actualTime      DateTime?              // When pickup/delivery actually happened
  // User tracking
  createdBy       String                 @db.ObjectId   // User who created the notification
  assignedTo      String?                @db.ObjectId   // User assigned to handle this
  respondedBy     String?                @db.ObjectId   // User who responded
  // Additional data
  customerInfo    Json?                  // Customer details for context
  deliveryMethod  BranchDeliveryMethod   @default(PICKUP)
  notes           String?
  responseNotes   String?
  // Timestamps
  createdAt       DateTime               @default(now())
  respondedAt     DateTime?
  completedAt     DateTime?
  updatedAt       DateTime               @updatedAt
  // Relations
  responses       BranchNotificationResponse[]
  transfers       BranchStockTransfer[]
}

model BranchNotificationResponse {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  notification     BranchNotification @relation(fields: [notificationId], references: [id])
  notificationId   String            @db.ObjectId
  responseType     ResponseType
  message          String?
  confirmedQty     Int?              // Quantity they can fulfill
  estimatedTime    DateTime?         // When they can have it ready
  actualQty        Int?              // Actual quantity provided
  respondedBy      String            @db.ObjectId // User who responded
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model BranchStockTransfer {
  id               String                    @id @default(auto()) @map("_id") @db.ObjectId
  transferNo       String                    @unique // Format: "BT000001"
  notificationId   String                    @db.ObjectId
  notification     BranchNotification        @relation(fields: [notificationId], references: [id])
  fromWarehouseId  String                    @db.ObjectId
  fromWarehouse    Warehouse                 @relation("TransferFrom", fields: [fromWarehouseId], references: [id])
  toWarehouseId    String                    @db.ObjectId
  toWarehouse      Warehouse                 @relation("TransferTo", fields: [toWarehouseId], references: [id])
  itemId           String                    @db.ObjectId
  requestedQty     Int
  transferredQty   Int
  method           BranchDeliveryMethod
  status           TransferStatus            @default(PENDING)
  trackingInfo     String?                   // Tracking number or delivery details
  deliveryAddress  String?                   // If delivery to customer directly
  customerInfo     Json?                     // Customer contact for direct delivery
  notes            String?
  createdBy        String                    @db.ObjectId
  handedBy         String?                   @db.ObjectId  // Who handed over the items
  receivedBy       String?                   @db.ObjectId  // Who received the items
  createdAt        DateTime                  @default(now())
  transferredAt    DateTime?
  receivedAt       DateTime?
  updatedAt        DateTime                  @updatedAt
}

enum NotificationType {
  STOCK_REQUEST      // Request for stock from another branch
  URGENT_RESTOCK     // Critical stock shortage
  CUSTOMER_PICKUP    // Customer will pick up from another branch
  INTER_BRANCH_DELIVERY  // Delivery between branches
  STOCK_AVAILABILITY // Notification about stock availability
}

enum NotificationPriority {
  BAJA
  NORMAL  
  ALTA
  CRÍTICA
}

enum NotificationStatus {
  PENDING         // Just created, waiting for response
  ACKNOWLEDGED    // Target branch has seen the notification
  ACCEPTED        // Target branch accepted to fulfill
  REJECTED        // Target branch cannot fulfill
  IN_PROGRESS     // Items being prepared/transferred
  READY           // Items ready for pickup
  COMPLETED       // Transfer completed successfully
  CANCELLED       // Request cancelled
  EXPIRED         // Request expired without response
}

enum ResponseType {
  ACCEPT          // Can fulfill the request
  PARTIAL_ACCEPT  // Can fulfill partially
  REJECT          // Cannot fulfill
  COUNTER_OFFER   // Different quantity or terms
  REQUEST_INFO    // Need more information
}

enum BranchDeliveryMethod {
  PICKUP          // Requesting branch picks up
  DELIVERY        // Source branch delivers
  CUSTOMER_PICKUP // Customer picks up from source branch
  DIRECT_DELIVERY // Source branch delivers directly to customer
}

enum TransferStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RECEIVED
  CANCELLED
}

// ******************* POS SYSTEM ****************** //

model PosSession {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  sessionNo        String      @unique // Format: "S000001"
  cashRegisterId   String      @db.ObjectId
  cashRegister     CashRegister @relation(fields: [cashRegisterId], references: [id])
  userId           String      @db.ObjectId
  user             User        @relation(fields: [userId], references: [id])
  status           PosSessionStatus @default(OPEN)
  openingCash      Float       @default(0) // Starting cash amount
  closingCash      Float?      // Final cash amount
  expectedCash     Float?      // System calculated cash
  variance         Float?      // Difference between expected and actual
  openedAt         DateTime    @default(now())
  closedAt         DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  posOrders        PosOrder[]
  cashCounts       CashCount[]
  receipts         PosReceipt[]
}

enum PosSessionStatus {
  OPEN
  CLOSED
  SUSPENDED
}

model PosOrder {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  orderNo           String       @unique // Format: "P000001"
  sessionId         String       @db.ObjectId
  session           PosSession   @relation(fields: [sessionId], references: [id])
  orderId           String?      @db.ObjectId // Link to main Order if needed
  order             Order?       @relation(fields: [orderId], references: [id])
  customerId        String?      @db.ObjectId
  customer          Client?      @relation(fields: [customerId], references: [id])
  status            PosOrderStatus @default(PENDING)
  subtotal          Float
  taxAmount         Float        @default(0)
  discountAmount    Float        @default(0)
  tipAmount         Float        @default(0)
  totalAmount       Float
  paymentType       PaymentType
  cashReceived      Float?       // For cash payments
  changeGiven       Float?       // For cash payments
  notes             String?
  receiptPrinted    Boolean      @default(false)
  voidReason        String?      // If order is voided
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  items             PosOrderItem[]
  payments          PosPayment[]
  receipts          PosReceipt[]
}

enum PosOrderStatus {
  PENDING
  COMPLETED
  VOIDED
  REFUNDED
}

enum PaymentType {
  CASH
  CARD
  MIXED
  ACCOUNT
}

model PosOrderItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  posOrderId    String    @db.ObjectId
  posOrder      PosOrder  @relation(fields: [posOrderId], references: [id])
  itemId        String    @db.ObjectId // Reference to Item
  name          String
  sku           String?
  barcode       String?
  price         Float
  quantity      Int
  discount      Float     @default(0) // Item-level discount
  totalPrice    Float
  modifiers     String?   // JSON string for item modifiers/options
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PosPayment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  posOrderId  String      @db.ObjectId
  posOrder    PosOrder    @relation(fields: [posOrderId], references: [id])
  type        PaymentType
  amount      Float
  reference   String?     // Card transaction ID, check number, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CashCount {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  sessionId   String      @db.ObjectId
  session     PosSession  @relation(fields: [sessionId], references: [id])
  countType   CashCountType
  // Bill denominations
  ones        Int         @default(0)
  fives       Int         @default(0)
  tens        Int         @default(0)
  twenties    Int         @default(0)
  fifties     Int         @default(0)
  hundreds    Int         @default(0)
  fiveHundreds Int        @default(0)
  thousands   Int         @default(0)
  // Coin denominations (centavos)
  centavos10  Int         @default(0)
  centavos20  Int         @default(0)
  centavos50  Int         @default(0)
  peso1       Int         @default(0)
  peso2       Int         @default(0)
  peso5       Int         @default(0)
  peso10      Int         @default(0)
  peso20      Int         @default(0)
  // Calculated totals
  totalCash   Float
  countedBy   String      @db.ObjectId
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum CashCountType {
  OPENING
  CLOSING
  MID_SHIFT
}

model HeldOrder {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  holdNumber       String         @unique // Format: "H000001"
  cashRegisterId   String         @db.ObjectId
  cashRegister     CashRegister   @relation(fields: [cashRegisterId], references: [id])
  customerId       String?        @db.ObjectId
  customer         Client?        @relation(fields: [customerId], references: [id])
  items            String         // JSON string of cart items
  subtotal         Float
  discountAmount   Float          @default(0)
  notes            String?
  heldBy           String         @db.ObjectId // User who held the order
  retrievedBy      String?        @db.ObjectId // User who retrieved the order
  status           HeldOrderStatus @default(HELD)
  heldAt           DateTime       @default(now())
  retrievedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum HeldOrderStatus {
  HELD
  RETRIEVED
  EXPIRED
}

model Favorite {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId      String   @db.ObjectId // Reference to Item
  name        String
  price       Float
  image       String?
  position    Int      // Display position in grid
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Discount {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String?       @unique // Discount code
  type          DiscountType
  value         Float         // Percentage or fixed amount
  minAmount     Float?        // Minimum order amount
  maxAmount     Float?        // Maximum discount amount
  isActive      Boolean       @default(true)
  validFrom     DateTime?
  validUntil    DateTime?
  usageLimit    Int?          // Max number of uses
  usageCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model PosReceipt {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  receiptNo   String     @unique // Format: "R000001"
  sessionId   String     @db.ObjectId
  session     PosSession @relation(fields: [sessionId], references: [id])
  posOrderId  String     @db.ObjectId
  posOrder    PosOrder   @relation(fields: [posOrderId], references: [id])
  type        ReceiptType
  content     String     // Receipt content/template
  printed     Boolean    @default(false)
  emailed     Boolean    @default(false)
  emailTo     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum ReceiptType {
  SALE
  REFUND
  VOID
}